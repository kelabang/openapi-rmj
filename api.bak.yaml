swagger: '2.0'
info:
  description: OpenApi for rumaji
  version: 1.0.0
  title: Rumaji
  termsOfService: 'http://rumaji.com/terms/'
  contact:
    email: apiteam@rumaji.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: api.rumaji.com
basePath: /v2
tags:
  - name: story
    description: Everything about Story
    externalDocs:
      description: Story Docs
      url: 'http://docs.rumaji.com/story'
  - name: alinea
    description: Alinea of story
  - name: user
    description: Operations about user
    externalDocs:
      description: User Docs
      url: 'http://docs.rumaji.com/user'
schemes:
  - http
paths:
  /story:
    post:
      tags:
        - story
      summary: Add a new story to the collection
      description: collection of story
      operationId: addStory
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Story object that needs to be added to the collection
          required: true
          schema:
            $ref: '#/definitions/Story'
      responses:
        '405':
          description: Invalid input
      security:
        - story_auth:
            - 'write:stories'
            - 'read:stories'
  /story/findByStatus:
    get:
      tags:
        - story
      summary: Finds Story by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findStoriesByStatus
      produces:
        - application/xml
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - published
              - draft
              - deleted
            default: draft
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Story'
        '400':
          description: Invalid status value
      security:
        - story_auth:
            - 'write:stories'
            - 'read:stories'
  /story/findByTags:
    get:
      tags:
        - story
      summary: Finds Stories by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use        
        tag1, tag2, tag3 for testing.
      operationId: findStoriesByTags
      produces:
        - application/xml
        - application/json
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Story'
        '400':
          description: Invalid tag value
      security:
        - story_auth:
            - 'write:stories'
            - 'read:stories'
      deprecated: false
  /story/findByTitle:
    get:
      tags:
        - story
      summary: Finds Stories by title
      description: Search title by status
      operationId: findStoriesByTitle
      produces:
        - application/xml
        - application/json
      parameters:
        - name: title
          in: query
          description: Title filter
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Story'
        '400':
          description: Invalid tag value
      security:
        - story_auth:
            - 'write:stories'
            - 'read:stories'
      deprecated: false
  '/story/{storyId}/alinea':
    get:
      tags:
        - story
      summary: Get all alinea by ID
      description: Returns collection alinea of story
      operationId: getStoryAlineaById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: storyId
          in: path
          description: ID of story to return collection of alinea
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Story'
        '400':
          description: Invalid ID supplied
        '404':
          description: Story not found
      security:
        - api_key: []
  '/story/{storyId}':
    get:
      tags:
        - story
      summary: Find story by ID
      description: Returns a single story
      operationId: getStoryById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: storyId
          in: path
          description: ID of story to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Story'
        '400':
          description: Invalid ID supplied
        '404':
          description: Story not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a story in the store with form data
      description: ''
      operationId: updateStoryWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: storyId
          in: path
          description: ID of story that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the story
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the story
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:stories'
            - 'read:stories'
    delete:
      tags:
        - story
      summary: Deletes a story
      description: ''
      operationId: deleteStory
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: storyId
          in: path
          description: Story id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Story not found
      security:
        - petstore_auth:
            - 'write:stories'
            - 'read:stories'
    put:
      tags:
        - story
      summary: Update an existing story
      description: ''
      operationId: updateStory
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Story object that needs to be added to the collection
          required: true
          schema:
            $ref: '#/definitions/Story'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Story not found
        '405':
          description: Validation exception
      security:
        - story_auth:
            - 'write:stories'
            - 'read:stories'
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the pet
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid Order
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getOrderById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          maximum: 10
          minimum: 1
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      produces:
        - application/xml
        - application/json
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          minimum: 1
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Story:
    type: object
    required:
      - title
      - content
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      title:
        type: string
        example: jalan yang panjang
      content:
        type: string
        example: pada sore hari yang dingin dan sepi
      status:
        type: string
        enum:
          - published
          - draft
          - deleted
    xml:
      name: Story
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
