swagger: '2.0'
info:
  description: OpenApi for rumaji
  version: 1.0.0
  title: Rumaji
  termsOfService: 'http://rumaji.com/terms/'
  contact:
    email: apiteam@rumaji.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:8080'
basePath: /v2
tags:
  - name: story
    description: Everything about Story
    externalDocs:
      description: Story Docs
      url: 'http://docs.rumaji.com/story'
schemes:
  - http
  - https
paths:
  /oauth/authorize:
    get:
      tags:
        - oauth
      summary: Request link authorize
      operationId: oauthAuthorize
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          name: client_id
          type: string
          description: The application's client ID (how the API identifies the application)
        - in: query
          name: redirect_uri
          type: string
          description: >-
            Where the service redirects the user-agent after an authorization
            code is granted
        - in: query
          name: response_type
          type: string
          description: >-
            Specifies that your application is requesting an authorization code
            grant
        - in: query
          name: scope
          type: string
          description: Specifies the level of access that the application is requesting
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
  /oauth/callback:
    get:
      tags:
        - oauth
      summary: Receive code authorization
      operationId: oauthCallbackAuthorize
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          name: code
          type: string
          description: The code authorization from server
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
  /oauth/token:
    get:
      tags:
        - oauth
      summary: Request access token
      operationId: oauthToken
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          name: client_id
          type: string
          description: The application's client ID (how the API identifies the application)
        - in: query
          name: client_secret
          type: string
        - in: query
          name: grant_type
          type: string
        - in: query
          name: code
          type: string
        - in: query
          name: redirect_uri
          type: string
          description: >-
            Where the service redirects the user-agent after an authorization
            code is granted
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
  /auth/login:
    post:
      tags:
        - auth
      summary: Authentication with password
      operationId: authPassword
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: user
          description: The user to create.
          schema:
            type: object
            required:
              - user
              - password
            properties:
              client_id:
                type: string
                example: '123'
              grant_type:
                type: string
                example: password
              user:
                type: string
                example: imam.tauhid.dar@gmail.com
              password:
                type: string
                example: imamtauhid
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
  /auth/twitter:
    post:
      tags:
        - auth
      summary: Authentication with twitter
      operationId: authTwitter
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: twitter
          description: The twitter to create.
          schema:
            type: object
            required:
              - oauth_token
              - oauth_token_secret
            properties:
              oauth_token:
                type: string
                example: kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4
              oauth_token_secret:
                type: string
                example: PbKfYqSryyeKDWz4ebtY3o5ogNLG11WJuZBc9fQrQo
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
  /auth/facebook:
    post:
      tags:
        - auth
      summary: Authentication with facebook
      operationId: authFacebook
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: facebook
          description: The facebook to create.
          schema:
            type: object
            required:
              - accessToken
              - userID
            properties:
              accessToken:
                type: string
                example: kagSNqWge8gB1WwE3plnFsJHAZVfxWD7Vb57p0b4
              userID:
                type: string
                example: 123654
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
  /user/registration:
    post:
      tags:
        - user
      summary: Register new user
      description: Register new user
      operationId: registerUser
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: user
          description: User object that needs to be register to the collection
          schema:
            type: object
            required:
              - username
              - email
              - password
            properties:
              username:
                type: string
                example: kelabang
              email:
                type: string
                example: kelabang@gmail.com
              password:
                type: string
                example: kelabangpassword
              ref_type:
                type: integer
                format: int64
                example: '12'
              ref_id:
                type: string
                example: '123123'
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
  /story/find:
    get:
      tags:
        - story
      summary: Find story
      description: find story
      operationId: findStory
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: query
          name: status
          type: string
          description: The status of story to return.
        - in: query
          name: title
          type: string
          description: The title of story to return.
        - in: query
          name: tags
          type: string
          description: The tags of story to return.
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Story'
        '405':
          description: Invalid input
  /story:
    post:
      tags:
        - story
      summary: Add a new story to the collection
      description: collection of story
      operationId: addStory
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: story
          description: Story object that needs to be added to the collection
          schema:
            type: object
            required:
              - title
              - content
            properties:
              title:
                type: string
                example: jalan yang panjang
              content:
                type: string
                example: pada sore hari yang dingin dan sepi
      responses:
        '201':
          description: Created
        '405':
          description: Invalid input
    get:
      tags:
        - story
      summary: Get story from collection
      description: collection of story
      operationId: getStory
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Story'
        '400':
          description: Invalid status value
      security:
        - JWT: []
  '/story/{storyId}':
    put:
      tags:
        - story
      summary: Update story from collection
      description: collection of story
      operationId: updateStory
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: storyId
          description: ID of story to return
          required: true
          type: integer
          format: int64
        - in: body
          name: story
          description: Story object that needs to be added to the collection
          schema:
            type: object
            required:
              - title
              - content
            properties:
              title:
                type: string
                example: jalan yang panjang
              content:
                type: string
                example: pada sore hari yang dingin dan sepi
      responses:
        '200':
          description: Updated
        '405':
          description: Invalid input
    delete:
      tags:
        - story
      summary: Delete from collection
      description: delete story
      operationId: deleteStory
      produces:
        - application/xml
        - application/json
      parameters:
        - in: path
          name: storyId
          description: ID of story return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Deleted
  '/story/{storyId}/publish':
    post:
      tags:
        - story
      summary: Publish story
      description: publish story
      operationId: postPublishStory
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: storyId
          description: ID of story to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Published
        '405':
          description: Invalid input
  '/story/{storyId}/draft':
    post:
      tags:
        - story
      summary: Draft story
      description: draft story
      operationId: postDraftStory
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: storyId
          description: ID of story to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Drafted
        '405':
          description: Invalid input
  /book:
    get:
      tags:
        - book
      summary: List of indexed Books
      description: Retreive latest indexed books
      operationId: getBook
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid status value
  '/book/{isbn}/feed':
    get:
      tags:
        - feed
      parameters:
        - in: path
          name: isbn
          type: string
          required: true
          description: isbn of book
        - in: query
          name: id
          type: string
          description: Feed id flag
        - in: query
          name: mode
          type: string
          description: Feed flow if next/prev flag
      summary: Feed of book
      description: Retrieve lastest update feed of book
      operationId: getBookFeed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Feed'
        '400':
          description: Invalid status value
  '/{username}/feed':
    get:
      tags:
        - feed
      parameters:
        - in: path
          name: username
          type: string
          required: true
          description: username of feed owner
        - in: query
          name: id
          type: string
          description: Feed id flag
        - in: query
          name: mode
          type: string
          description: Feed flow if next/prev flag
      summary: Feed of user
      description: Retreive latest update feed of user
      operationId: getUserFeed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Feed'
        '400':
          description: Invalid status value
  '/feed/{feedId}/comment':
    get:
      tags:
        - feed
      summary: Get all comments on feed
      description: retreive comment on feed
      operationId: getCommentOnFeed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: feedId
          description: Id of feed
          required: true
          type: number
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid status value
    post:
      tags:
        - feed
      summary: Add a new comment to feed
      description: comment on feed
      operationId: addCommentOnFeed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: feedId
          description: Id of feed
          required: true
          type: number
        - in: body
          name: feed
          description: Feed object that needs tobe added to timeline
          schema:
            type: object
            required:
              - type
              - content
            properties:
              content:
                type: string
                example: hari ini sangat panas
              type:
                type: integer
                format: int64
                example: 1
      responses:
        '200':
          description: Successful operation
        '201':
          description: Feed created
        '400':
          description: Invalid status value
      security:
        - JWT: []
  /feed:
    post:
      tags:
        - feed
      summary: Add a new feed to timeline
      description: feed on timeline
      operationId: addFeed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: feed
          description: Feed object that needs tobe added to timeline
          schema:
            type: object
            required:
              - type
              - content
            properties:
              content:
                type: string
                example: hari ini sangat panas
              type:
                type: integer
                format: int64
                example: 1
      responses:
        '200':
          description: Successful operation
        '201':
          description: Feed created
        '400':
          description: Invalid status value
      security:
        - JWT: []
    get:
      tags:
        - feed
      parameters:
        - in: query
          name: id
          type: string
          description: Feed id flag.
        - in: query
          name: mode
          type: string
          description: Feed flow if next/prev flag.
      summary: Get feed to timeline
      description: feed to timeline
      operationId: getFeed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Feed'
        '400':
          description: Invalid status value
  '/user/{userId}/follow':
    post:
      tags:
        - user
      summary: Follow user
      description: Follow user
      operationId: followUser
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: userId
          description: User ID for following user
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Followed
        '405':
          description: Invalid input
      security:
        - JWT: []
  /user/subscribe:
    post:
      tags:
        - user
      summary: Subscribe new email
      description: Register new email
      operationId: subscribeEmail
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: user
          description: Email need to subscribe
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                example: kelabang@gmail.com
      responses:
        '200':
          description: Subscribed
        '405':
          description: Invalid input
  /me:
    get:
      tags:
        - user
      summary: Profile Logged user
      description: Get Profile Logged User
      operationId: profileUserLogged
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
      security:
        - JWT: []
  '/profile/{username}':
    get:
      tags:
        - user
      summary: Profile user
      description: Get Profile User
      operationId: profileUser
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: path
          name: username
          description: Username of user to return
          required: true
          type: string
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
  '/feed/{feedId}/video':
    put:
      tags:
        - feed
      summary: Attach video to feed
      description: Server will attach video to feed
      operationId: attachVideoToFeed
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: path
          name: feedId
          type: number
          required: true
          description: id of feed
        - in: body
          name: video
          description: video need to attach
          schema:
            type: object
            required:
              - size
              - key
              - source
              - md5
            properties:
              source:
                type: string
                example: jwp
              key:
                type: string
                example: ga2iPJq1
              md5:
                type: string
                example: ec599ac8ad8f3f51815a0e0e573b0cca
              size:
                type: string
                example: 431282
      responses:
        '200':
          description: Success
        '400':
          description: Feed not found
        '405':
          description: Invalid input
      security:
        - JWT: []
  /video/auth:
    get:
      tags:
        - video
      parameters:
        - in: query
          name: size
          type: string
          description: Size of file
        - in: query
          name: mime
          type: string
          description: Mime type of file
        - in: query
          name: method
          type: string
          description: Method upload of video
      summary: Get link to upload
      description: Server will provide the upload link
      operationId: createVideoUpload
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: Success
        '405':
          description: Invalid input
      security:
        - JWT: []
securityDefinitions:
  JWT:
    description: Bearer token JWT
    type: apiKey
    name: Authorization
    in: header
definitions:
  Feed:
    type: object
    properties:
      id:
        type: integer
        format: int64
      content:
        type: string
      created:
        type: string
      updated:
        type: string
      user:
        $ref: '#/definitions/User'
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phone:
        type: string
      status:
        type: integer
        format: int32
        description: '0 normal, 1 deactive, 2 suspend, 3 banned'
      activation:
        type: integer
        format: int32
        description: '0 not active, 1 active'
    xml:
      name: User
  Story:
    type: object
    required:
      - title
      - content
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      title:
        type: string
        example: jalan yang panjang
      content:
        type: string
        example: pada sore hari yang dingin dan sepi
      status:
        type: string
        enum:
          - published
          - draft
          - deleted
    xml:
      name: Story
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
